<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.rongdu.rongyun.mapper.ProductMapper">
	<resultMap id="BaseResultMap" type="com.rongdu.rongyun.model.ProductRes">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="categoryCode" property="categoryCode" jdbcType="VARCHAR" />
		<result column="productCode" property="productCode" jdbcType="VARCHAR" />
		<result column="productName" property="productName" jdbcType="VARCHAR" />
		<result column="serviceType" property="serviceType" jdbcType="INTEGER" />
		<result column="businessType" property="businessType" jdbcType="INTEGER" />
		<result column="productDescription" property="productDescription"
			jdbcType="VARCHAR" />
		<result column="unitPrice" property="unitPrice" jdbcType="DECIMAL" />
		<result column="totalPrice" property="totalPrice" jdbcType="DECIMAL" />
		<result column="productNumber" property="productNumber"
			jdbcType="INTEGER" />
		<result column="strategyUnit" property="strategyUnit" jdbcType="VARCHAR" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="prodType" property="prodType" jdbcType="VARCHAR" />
		<result column="payMode" property="payMode" jdbcType="VARCHAR" />
		<result column="productCompanyId" property="productCompanyId"
			jdbcType="INTEGER" />

	</resultMap>
	<sql id="Base_Column_List">
		id, categoryCode, productCode, productName, serviceType,
		businessType,
		productDescription,
		unitPrice, totalPrice, productNumber,
		strategyUnit, state, prodType, payMode,productCompanyId
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from product
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="selectByCode" resultMap="BaseResultMap"
		parameterType="productReq">
		select a.*,b.name productCompanyName from 
		(select * from product where 1=1
		and categoryCode =
		#{categoryCode,jdbcType=VARCHAR} and
		state=1
		<if test="productCompanyId!=null">
			and productCompanyId=#{productCompanyId,jdbcType=INTEGER}
		</if>
		) a 
		left join productCompany b on a.productCompanyId = b.id
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		product
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.rongdu.rongyun.domain.Product">
		insert into product (id,
		productCode, productName,
		productType, productCategory,
		productDescription,
		strategyPrice, strategyType, strategyUnit,
		state,productCompanyId)
		values (#{id,jdbcType=INTEGER},
		#{productCode,jdbcType=VARCHAR},
		#{productName,jdbcType=VARCHAR},
		#{productType,jdbcType=INTEGER}, #{productCategory,jdbcType=INTEGER},
		#{productDescription,jdbcType=VARCHAR},
		#{strategyPrice,jdbcType=DECIMAL}, #{strategyType,jdbcType=INTEGER},
		#{strategyUnit,jdbcType=VARCHAR},
		#{state,jdbcType=INTEGER},#{productCompanyId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.rongdu.rongyun.domain.Product">
		insert into product
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="productCode != null">
				productCode,
			</if>
			<if test="productName != null">
				productName,
			</if>
			<if test="productType != null">
				productType,
			</if>
			<if test="productCategory != null">
				productCategory,
			</if>
			<if test="productDescription != null">
				productDescription,
			</if>
			<if test="strategyPrice != null">
				strategyPrice,
			</if>
			<if test="strategyType != null">
				strategyType,
			</if>
			<if test="strategyUnit != null">
				strategyUnit,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="productCompanyId != null">
				productCompanyId,
			</if>

		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="productCode != null">
				#{productCode,jdbcType=VARCHAR},
			</if>
			<if test="productName != null">
				#{productName,jdbcType=VARCHAR},
			</if>
			<if test="productType != null">
				#{productType,jdbcType=INTEGER},
			</if>
			<if test="productCategory != null">
				#{productCategory,jdbcType=INTEGER},
			</if>
			<if test="productDescription != null">
				#{productDescription,jdbcType=VARCHAR},
			</if>
			<if test="strategyPrice != null">
				#{strategyPrice,jdbcType=DECIMAL},
			</if>
			<if test="strategyType != null">
				#{strategyType,jdbcType=INTEGER},
			</if>
			<if test="strategyUnit != null">
				#{strategyUnit,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
			<if test="productCompanyId != null">
				#{productCompanyId,jdbcType=INTEGER},
			</if>

		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.rongdu.rongyun.domain.Product">
		update product
		<set>
			<if test="productCode != null">
				productCode = #{productCode,jdbcType=VARCHAR},
			</if>
			<if test="productName != null">
				productName = #{productName,jdbcType=VARCHAR},
			</if>
			<if test="productType != null">
				productType = #{productType,jdbcType=INTEGER},
			</if>
			<if test="productCategory != null">
				productCategory = #{productCategory,jdbcType=INTEGER},
			</if>
			<if test="productDescription != null">
				productDescription =
				#{productDescription,jdbcType=VARCHAR},
			</if>
			<if test="strategyPrice != null">
				strategyPrice = #{strategyPrice,jdbcType=DECIMAL},
			</if>
			<if test="strategyType != null">
				strategyType = #{strategyType,jdbcType=INTEGER},
			</if>
			<if test="strategyUnit != null">
				strategyUnit = #{strategyUnit,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
			<if test="productCompanyId != null">
				productCompanyId = #{productCompanyId,jdbcType=INTEGER},
			</if>

		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.rongdu.rongyun.domain.Product">
		update product
		set
		productCode = #{productCode,jdbcType=VARCHAR},
		productName =
		#{productName,jdbcType=VARCHAR},
		productType =
		#{productType,jdbcType=INTEGER},
		productCategory =
		#{productCategory,jdbcType=INTEGER},
		productDescription =
		#{productDescription,jdbcType=VARCHAR},
		strategyPrice =
		#{strategyPrice,jdbcType=DECIMAL},
		strategyType =
		#{strategyType,jdbcType=INTEGER},
		strategyUnit =
		#{strategyUnit,jdbcType=VARCHAR},
		state = #{state,jdbcType=INTEGER},
		productCompanyId = #{productCompanyId,jdbcType=INTEGER}
		where id =
		#{id,jdbcType=INTEGER}
	</update>

	<select id="selectByProductCode" resultMap="BaseResultMap"
		parameterType="string">
		select * from product where productCode = #{productCode}
	</select>
	
	<!-- selectProductByOrderIds -->
	<select id="selectProductByOrderIds" resultMap="BaseResultMap"  parameterType="java.util.Map">
	select b.* from 
	(select * from corpProductOrder  where id in
	<foreach item="item" index="index" collection="orderIds"  open="(" separator="," close=")">
		#{item}
	</foreach>) a 
	left join product b
	on a.productCode = b.productCode
	where b.categoryCode = #{categoryCode}
	</select> 
</mapper>